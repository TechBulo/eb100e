<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Fri Dec 18 00:57:49 2015
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; cam_osd_control &rArr; wait_one_command &rArr; command_analysis &rArr; Keyboard_camera_porotocol_2 &rArr; PELCO_D_P_protocol_analysis_2 &rArr; save_system_para &rArr; set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">CAN1_RX1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC1_2_IRQHandler</a> from stm32f10x_it.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">ADC3_IRQHandler</a> from stm32f10x_it.o(i.ADC3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel1_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel2_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel3_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel4_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel5_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel6_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel7_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel1_IRQHandler</a> from stm32f10x_it.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel2_IRQHandler</a> from stm32f10x_it.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel3_IRQHandler</a> from stm32f10x_it.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel4_5_IRQHandler</a> from stm32f10x_it.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from stm32f10x_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from stm32f10x_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from stm32f10x_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from stm32f10x_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from stm32f10x_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from stm32f10x_it.o(i.FLASH_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">FSMC_IRQHandler</a> from stm32f10x_it.o(i.FSMC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from stm32f10x_it.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from stm32f10x_it.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from stm32f10x_it.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from stm32f10x_it.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from stm32f10x_it.o(i.PVD_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from stm32f10x_it.o(i.RCC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">RTCAlarm_IRQHandler</a> from stm32f10x_it.o(i.RTCAlarm_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RTC_IRQHandler</a> from stm32f10x_it.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from stm32f10x_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from stm32f10x_it.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from stm32f10x_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from stm32f10x_it.o(i.SPI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[e]">TAMPER_IRQHandler</a> from stm32f10x_it.o(i.TAMPER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_IRQHandler</a> from stm32f10x_it.o(i.TIM1_BRK_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from stm32f10x_it.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x_it.o(i.TIM1_TRG_COM_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_UP_IRQHandler</a> from stm32f10x_it.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from stm32f10x_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from stm32f10x_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from stm32f10x_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM6_IRQHandler</a> from stm32f10x_it.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from stm32f10x_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_IRQHandler</a> from stm32f10x_it.o(i.TIM8_BRK_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from stm32f10x_it.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_IRQHandler</a> from stm32f10x_it.o(i.TIM8_TRG_COM_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_UP_IRQHandler</a> from stm32f10x_it.o(i.TIM8_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from stm32f10x_it.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from stm32f10x_it.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from stm32f10x_it.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from stm32f10x_it.o(i.WWDG_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[48]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[1]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced 2 times from malloc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[57]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[146]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[147]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[148]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[149]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_focus_onepush
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_focus_onepush
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_focus_onepush
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_focus_onepush
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_focus_onepush
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[14c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[14d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[14e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[50]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[150]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC1_2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>APP_TIM2_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, api.o(i.APP_TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_int
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>APP_TIM3_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, motor.o(i.APP_TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = APP_TIM3_IRQHandler &rArr; timer1_ovf_isr &rArr; focus_action &rArr; focus_motor_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_ovf_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>APP_TIM4_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, api.o(i.APP_TIM4_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>APP_TIM5_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, motor.o(i.APP_TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = APP_TIM5_IRQHandler &rArr; timer3_ovf_isr &rArr; zoom_action &rArr; zoom_motor_wide
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_ovf_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>APP_TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api.o(i.APP_TIM6_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>APP_USART1_Baudrate</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, api.o(i.APP_USART1_Baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = APP_USART1_Baudrate &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[61]"></a>APP_USART1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, api.o(i.APP_USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APP_USART1_IRQHandler &rArr; uart0_rx_isr &rArr; addqueue &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_rx_isr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>APP_USART2_Baudrate</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, api.o(i.APP_USART2_Baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = APP_USART2_Baudrate &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_camera_init
</UL>

<P><STRONG><a name="[65]"></a>APP_USART2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, api.o(i.APP_USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = APP_USART2_IRQHandler &rArr; serial_int1_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_int1_send
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_int1_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>APP_USART3_Baudrate</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, jiguang.o(i.APP_USART3_Baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = APP_USART3_Baudrate &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_io_init
</UL>

<P><STRONG><a name="[f4]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_TamperPinCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_key_pin_Init
</UL>

<P><STRONG><a name="[8d]"></a>BSP_DelayMS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, api.o(i.BSP_DelayMS))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
</UL>

<P><STRONG><a name="[6b]"></a>BSP_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, api.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Init &rArr; BSP_RCC_Init &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTick_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[6d]"></a>BSP_NVIC_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, api.o(i.BSP_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[6c]"></a>BSP_RCC_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, api.o(i.BSP_RCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_RCC_Init &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[6e]"></a>BSP_SysTick_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api.o(i.BSP_SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[7e]"></a>BSP_Timer2_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, api.o(i.BSP_Timer2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Timer2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_initial
</UL>

<P><STRONG><a name="[86]"></a>BSP_Timer3_Init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, api.o(i.BSP_Timer3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Timer3_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>

<P><STRONG><a name="[87]"></a>BSP_Timer5_Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, api.o(i.BSP_Timer5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Timer5_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>

<P><STRONG><a name="[88]"></a>BSP_USART1_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, api.o(i.BSP_USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_USART1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[8c]"></a>BSP_USART2_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, api.o(i.BSP_USART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_USART2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_camera_init
</UL>

<P><STRONG><a name="[8e]"></a>BSP_USART3_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, jiguang.o(i.BSP_USART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_USART3_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_io_init
</UL>

<P><STRONG><a name="[17]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>Dir_Pos_focus</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, motor.o(i.Dir_Pos_focus))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_MotorControll
</UL>

<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>

<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[74]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[3c]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FSMC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;an41908a_spi_pin_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_pin_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_voltage_pin_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_pin_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_ex_pin_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_pin_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_function_pin_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_key_pin_Init
</UL>

<P><STRONG><a name="[138]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[a0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIReadUint
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_lens_voltage_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_motor_sub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_motor_plus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_pin_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_voltage_pin_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_long_osd_emu
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_pin_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_ex_pin_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_pin_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_function_pin_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_sensor_format_set_with_long_key
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_on_off
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_off_on
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_ntsc_pal_switch
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_hd_switch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_cvbs_switch
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_filt_cutter_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_motor_wide
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_motor_tele
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_motor_stop
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_motor_stop
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_motor_near
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_motor_far
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_lens_voltage_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_motor_sub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_motor_plus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_voltage_pin_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_long_osd_emu
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_ex_pin_set
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_ex_pin_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_sensor_format_set_with_long_key
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_on_off
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_off_on
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_key_pin_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_ntsc_pal_switch
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_hd_switch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_cvbs_switch
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_filt_cutter_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_motor_wide
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_motor_tele
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_motor_near
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_motor_far
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[98]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io_output
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIWriteUint
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIReadUint
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvFocusZoomInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io3_output
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io2_output
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;an41908a_spi_pin_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenDrvZoomMove
</UL>

<P><STRONG><a name="[d7]"></a>GenCRC</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, camera_control.o(i.GenCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GenCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buffer_send
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_by_block_8
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_by_block
</UL>

<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>InterruptConfig</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, main.o(i.InterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InterruptConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>Keyboard_camera_porotocol_2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, protocol.o(i.Keyboard_camera_porotocol_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Keyboard_camera_porotocol_2 &rArr; PELCO_D_P_protocol_analysis_2 &rArr; save_system_para &rArr; set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PELCO_D_P_protocol_analysis_2
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analysis
</UL>

<P><STRONG><a name="[95]"></a>LenDrvZoomMove</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, an41908a.o(i.LenDrvZoomMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LenDrvZoomMove &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensdrvDelay_us
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIWriteUint
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIReadUint
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_open_set_relatively
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_lens_pos_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_close_set_relatively
</UL>

<P><STRONG><a name="[9a]"></a>LensDrvFocusZoomInit</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, an41908a.o(i.LensDrvFocusZoomInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LensDrvFocusZoomInit &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensdrvDelay_us
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIWriteUint
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvInit
</UL>

<P><STRONG><a name="[9b]"></a>LensDrvInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, an41908a.o(i.LensDrvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LensDrvInit &rArr; LensDrvIrisInit &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvIrisInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvFocusZoomInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;an41908a_spi_pin_init
</UL>

<P><STRONG><a name="[9c]"></a>LensDrvIrisInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, an41908a.o(i.LensDrvIrisInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LensDrvIrisInit &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIWriteUint
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvInit
</UL>

<P><STRONG><a name="[96]"></a>LensDrvSPIReadUint</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, an41908a.o(i.LensDrvSPIReadUint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LensDrvSPIReadUint
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ns
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10ns
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenDrvZoomMove
</UL>

<P><STRONG><a name="[97]"></a>LensDrvSPIWriteUint</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, an41908a.o(i.LensDrvSPIWriteUint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_50ns
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10ns
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvIrisInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvFocusZoomInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenDrvZoomMove
</UL>

<P><STRONG><a name="[99]"></a>LensdrvDelay_us</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, an41908a.o(i.LensdrvDelay_us))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvFocusZoomInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenDrvZoomMove
</UL>

<P><STRONG><a name="[a1]"></a>MOTO_move</STRONG> (Thumb, 456 bytes, Stack size 4 bytes, motor.o(i.MOTO_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MOTO_move
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_ovf_isr
</UL>

<P><STRONG><a name="[a3]"></a>MOTO_move_tilt</STRONG> (Thumb, 286 bytes, Stack size 4 bytes, motor.o(i.MOTO_move_tilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MOTO_move_tilt
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_ovf_isr
</UL>

<P><STRONG><a name="[10c]"></a>MotorSpeedClass</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(i.MotorSpeedClass))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_MotorControll
</UL>

<P><STRONG><a name="[a4]"></a>MotorStop</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, motor.o(i.MotorStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorStop &rArr; zoom_action &rArr; zoom_motor_wide
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_action
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_action
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptz_execute
</UL>

<P><STRONG><a name="[80]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer3_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer5_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer2_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>

<P><STRONG><a name="[6f]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NVIC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>

<P><STRONG><a name="[90]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>

<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_key_pin_Init
</UL>

<P><STRONG><a name="[78]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[7f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer3_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer5_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer2_Init
</UL>

<P><STRONG><a name="[be]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[89]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;an41908a_spi_pin_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_pin_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_voltage_pin_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_pin_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_ex_pin_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_pin_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_function_pin_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_key_pin_Init
</UL>

<P><STRONG><a name="[bd]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[70]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[bf]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[7b]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[7d]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[75]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[71]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_key_pin_Init
</UL>

<P><STRONG><a name="[77]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[76]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[7a]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[79]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[7c]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[72]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RCC_Init
</UL>

<P><STRONG><a name="[13d]"></a>RS485_SendBytes</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, main.o(i.RS485_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RS485_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_rs485_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_cmd_to_camlink
</UL>

<P><STRONG><a name="[35]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTCAlarm_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SDIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[ab]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_syspara_to_eeporm
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_syspara_from_eeporm
</UL>

<P><STRONG><a name="[ae]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, bsp_spi_flash.o(i.SPI_FLASH_BufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_write
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_syspara_to_eeporm
</UL>

<P><STRONG><a name="[b0]"></a>SPI_FLASH_Init</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, bsp_spi_flash.o(i.SPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_FLASH_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[af]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.SPI_FLASH_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[ac]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[b4]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.SPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[b3]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.SPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[b5]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[b7]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[b6]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[b1]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>System_data_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, protocol.o(i.System_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = System_data_init &rArr; my_mem_init &rArr; my_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TAMPER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; APP_TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_IRQHandler &rArr; APP_TIM3_IRQHandler &rArr; timer1_ovf_isr &rArr; focus_action &rArr; focus_motor_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TIM3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TIM4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM5_IRQHandler &rArr; APP_TIM5_IRQHandler &rArr; timer3_ovf_isr &rArr; zoom_action &rArr; zoom_motor_wide
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TIM5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TIM6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer3_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer5_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer2_Init
</UL>

<P><STRONG><a name="[85]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer2_Init
</UL>

<P><STRONG><a name="[81]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer3_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer5_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer2_Init
</UL>

<P><STRONG><a name="[84]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer3_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer5_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer2_Init
</UL>

<P><STRONG><a name="[82]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer3_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer5_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer2_Init
</UL>

<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART1_IRQHandler &rArr; APP_USART1_IRQHandler &rArr; uart0_rx_isr &rArr; addqueue &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_IRQHandler &rArr; APP_USART2_IRQHandler &rArr; serial_int1_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_int1_send
</UL>

<P><STRONG><a name="[5f]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART1_Baudrate
</UL>

<P><STRONG><a name="[126]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_io_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_camera_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[66]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART2_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART2_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART1_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_io_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txd1_buffer_send
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_camera_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_int1_send
</UL>

<P><STRONG><a name="[60]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART3_Baudrate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART2_Baudrate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART1_Baudrate
</UL>

<P><STRONG><a name="[67]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART2_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_int1_send
</UL>

<P><STRONG><a name="[36]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USBWakeUp_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[154]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[155]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c0]"></a>addqueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue1.o(i.addqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = addqueue &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_rx_isr
</UL>

<P><STRONG><a name="[c2]"></a>an41908a_spi_pin_init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, an41908a.o(i.an41908a_spi_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = an41908a_spi_pin_init &rArr; LensDrvInit &rArr; LensDrvIrisInit &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[c3]"></a>auto_focus_onepush</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, main.o(i.auto_focus_onepush))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = auto_focus_onepush &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_goto_pos_absolutely
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>cam_atw_level_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, camera_control.o(i.cam_atw_level_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cam_atw_level_get &rArr; cam_get_parameters_oneByte &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[c8]"></a>cam_atw_level_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, camera_control.o(i.cam_atw_level_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_atw_level_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[ca]"></a>cam_brightness_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, camera_control.o(i.cam_brightness_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cam_brightness_get &rArr; cam_get_parameters_oneByte &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[cb]"></a>cam_brightness_mode_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, camera_control.o(i.cam_brightness_mode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cam_brightness_mode_get &rArr; cam_get_parameters_oneByte &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[cc]"></a>cam_brightness_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, camera_control.o(i.cam_brightness_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_brightness_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[cd]"></a>cam_color_bar_mode_set</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, camera_control.o(i.cam_color_bar_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_color_bar_mode_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[ce]"></a>cam_color_mode_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, camera_control.o(i.cam_color_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_color_mode_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[cf]"></a>cam_cross_line_mode_set</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, camera_control.o(i.cam_cross_line_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_cross_line_mode_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[d0]"></a>cam_cvbs_mode_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, camera_control.o(i.cam_cvbs_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_cvbs_mode_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_framerate_set
</UL>

<P><STRONG><a name="[d1]"></a>cam_filt_cutter_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.cam_filt_cutter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cam_filt_cutter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[d2]"></a>cam_framerate_set</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, camera_control.o(i.cam_framerate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cam_framerate_set &rArr; cam_sensor_format_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sensor_format_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_cvbs_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[d4]"></a>cam_freeze_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, camera_control.o(i.cam_freeze_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_freeze_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[d5]"></a>cam_frog_set</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, camera_control.o(i.cam_frog_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_frog_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[d6]"></a>cam_get_parameters_by_block</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, camera_control.o(i.cam_get_parameters_by_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cam_get_parameters_by_block &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txd1_buffer_send
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_response_check
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cam_para_all
</UL>

<P><STRONG><a name="[da]"></a>cam_get_parameters_by_block_8</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, camera_control.o(i.cam_get_parameters_by_block_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cam_get_parameters_by_block_8 &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txd1_buffer_send
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_response_check
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cam_para_all
</UL>

<P><STRONG><a name="[c7]"></a>cam_get_parameters_oneByte</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, camera_control.o(i.cam_get_parameters_oneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cam_get_parameters_oneByte &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txd1_buffer_send
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_response_check
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sensor_format_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_nega_posi_mode_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_cvbs_mode_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_cross_line_mode_set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_color_mode_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_color_bar_mode_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_brightness_mode_get
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_brightness_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_atw_level_get
</UL>

<P><STRONG><a name="[db]"></a>cam_nega_posi_mode_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, camera_control.o(i.cam_nega_posi_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_nega_posi_mode_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[dc]"></a>cam_osd_control</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, osd_control.o(i.cam_osd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cam_osd_control &rArr; wait_one_command &rArr; command_analysis &rArr; Keyboard_camera_porotocol_2 &rArr; PELCO_D_P_protocol_analysis_2 &rArr; save_system_para &rArr; set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_osd_key_emulate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_one_command
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_not_this_command
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>cam_picture_reverse_set</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, camera_control.o(i.cam_picture_reverse_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_picture_reverse_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[d9]"></a>cam_response_check</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, camera_control.o(i.cam_response_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cam_response_check &rArr; delay_X1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_by_block_8
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_by_block
</UL>

<P><STRONG><a name="[d3]"></a>cam_sensor_format_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, camera_control.o(i.cam_sensor_format_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_sensor_format_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_framerate_set
</UL>

<P><STRONG><a name="[c9]"></a>cam_set_parameters</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, camera_control.o(i.cam_set_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buffer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_zoom_mode_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_zoom_disp_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_zoom_data_set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shutter_mode_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sensor_format_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_picture_reverse_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_nega_posi_mode_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_frog_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_freeze_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_framerate_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_cvbs_mode_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_cross_line_mode_set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_color_mode_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_color_bar_mode_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_brightness_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_atw_level_set
</UL>

<P><STRONG><a name="[e2]"></a>cam_set_parameters_by_block</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, camera_control.o(i.cam_set_parameters_by_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cam_set_parameters_by_block &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buffer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cam_para_all
</UL>

<P><STRONG><a name="[e3]"></a>cam_set_parameters_by_block_8</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, camera_control.o(i.cam_set_parameters_by_block_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cam_set_parameters_by_block_8 &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buffer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cam_para_all
</UL>

<P><STRONG><a name="[e4]"></a>cam_shutter_mode_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, camera_control.o(i.cam_shutter_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_shutter_mode_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[e5]"></a>cam_shutter_value_get</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, camera_control.o(i.cam_shutter_value_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cam_shutter_value_get &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buffer_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_auto_by_shutter_handle
</UL>

<P><STRONG><a name="[e6]"></a>cam_zoom_data_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, camera_control.o(i.cam_zoom_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_zoom_data_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[e7]"></a>cam_zoom_disp_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, camera_control.o(i.cam_zoom_disp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_zoom_disp_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[e8]"></a>cam_zoom_mode_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, camera_control.o(i.cam_zoom_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_zoom_mode_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[e1]"></a>camera_buffer_send</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, camera_control.o(i.camera_buffer_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txd1_buffer_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenCRC
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_osd_key_emulate_mode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_osd_key_emulate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters_by_block_8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters_by_block
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shutter_value_get
</UL>

<P><STRONG><a name="[ea]"></a>camera_cvbs_switch</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.camera_cvbs_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = camera_cvbs_switch &rArr; delay_X1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_off_on
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[ec]"></a>camera_hd_switch</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.camera_hd_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = camera_hd_switch &rArr; delay_X1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_off_on
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[ee]"></a>camera_ntsc_pal_switch</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.camera_ntsc_pal_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = camera_ntsc_pal_switch &rArr; delay_X1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_off_on
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[de]"></a>camera_osd_key_emulate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, camera_control.o(i.camera_osd_key_emulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = camera_osd_key_emulate &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buffer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_osd_switch
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_osd_control
</UL>

<P><STRONG><a name="[ef]"></a>camera_osd_key_emulate_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, camera_control.o(i.camera_osd_key_emulate_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = camera_osd_key_emulate_mode &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buffer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_osd_switch
</UL>

<P><STRONG><a name="[f0]"></a>camera_osd_switch</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, camera_control.o(i.camera_osd_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = camera_osd_switch &rArr; camera_osd_key_emulate_mode &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_osd_key_emulate_mode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_osd_key_emulate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[f1]"></a>camera_power_key_pin_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, main.o(i.camera_power_key_pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = camera_power_key_pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_TamperPinCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[eb]"></a>camera_power_off_on</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.camera_power_off_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = camera_power_off_on
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_sensor_format_set_with_long_key
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_ntsc_pal_switch
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_hd_switch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_cvbs_switch
</UL>

<P><STRONG><a name="[f5]"></a>camera_power_on_off</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.camera_power_on_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = camera_power_on_off
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[f6]"></a>camera_sensor_format_set_with_long_key</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.camera_sensor_format_set_with_long_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = camera_sensor_format_set_with_long_key &rArr; delay_X1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_off_on
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[f7]"></a>command_analysis</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.command_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = command_analysis &rArr; Keyboard_camera_porotocol_2 &rArr; PELCO_D_P_protocol_analysis_2 &rArr; save_system_para &rArr; set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delqueue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_camera_porotocol_2
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_one_command
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_not_this_command
</UL>

<P><STRONG><a name="[9d]"></a>delay_100ns</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, an41908a.o(i.delay_100ns))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIWriteUint
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIReadUint
</UL>

<P><STRONG><a name="[9f]"></a>delay_10ns</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, an41908a.o(i.delay_10ns))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIWriteUint
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIReadUint
</UL>

<P><STRONG><a name="[fb]"></a>delay_1ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, motor.o(i.delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>

<P><STRONG><a name="[a2]"></a>delay_1us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motor.o(i.delay_1us))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_move_tilt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_move
</UL>

<P><STRONG><a name="[f9]"></a>delay_2us</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, api.o(i.delay_2us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_2us
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_half_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_half_ms
</UL>

<P><STRONG><a name="[9e]"></a>delay_50ns</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, an41908a.o(i.delay_50ns))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIWriteUint
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LensDrvSPIReadUint
</UL>

<P><STRONG><a name="[a7]"></a>delay_X1ms</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, motor.o(i.delay_X1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_X1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_cmd_packet_send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cam_para_all
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cam_para_all
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_osd_switch
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_response_check
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_motor_sub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_motor_plus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shutter_value_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_long_osd_emu
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_open_set_relatively
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_lens_pos_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_close_set_relatively
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_sensor_format_set_with_long_key
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_ntsc_pal_switch
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_hd_switch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_cvbs_switch
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[fc]"></a>delay_half_ms</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, api.o(i.delay_half_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_half_ms &rArr; delay_2us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_2us
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_half_second
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>delay_half_second</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, api.o(i.delay_half_second))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_half_second &rArr; delay_half_ms &rArr; delay_2us
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_half_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[fa]"></a>delay_half_us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, api.o(i.delay_half_us))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_2us
</UL>

<P><STRONG><a name="[e9]"></a>delayms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, api.o(i.delayms))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buffer_send
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_rs485_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_cmd_to_camlink
</UL>

<P><STRONG><a name="[f8]"></a>delqueue</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, queue1.o(i.delqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = delqueue &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analysis
</UL>

<P><STRONG><a name="[ff]"></a>dome_func_control</STRONG> (Thumb, 778 bytes, Stack size 16 bytes, extern_function.o(i.dome_func_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dome_func_control &rArr; load_system_para_by_mode &rArr; get_domeID &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_proto_call_preset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_threshold_set
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_lens_voltage_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io_output
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_osd_switch
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_zoom_data_set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shutter_mode_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_picture_reverse_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_nega_posi_mode_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_freeze_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_framerate_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_cross_line_mode_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_color_bar_mode_set
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_half_second
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io3_output
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io2_output
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_half_ms
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_ex_pin_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_sensor_format_set_with_long_key
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_on_off
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_off_on
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_ntsc_pal_switch
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_hd_switch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_cvbs_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>eeprom_byte_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.eeprom_byte_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eeprom_byte_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_threshold_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_domeID
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_syspara_from_eeporm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_domeID
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baudrate
</UL>

<P><STRONG><a name="[109]"></a>eeprom_byte_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.eeprom_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_threshold_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_syspara_to_eeporm
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_domeID
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_baudrate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_domeID
</UL>

<P><STRONG><a name="[10a]"></a>extern_function_pin_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(i.extern_function_pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = extern_function_pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io3_output
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io2_output
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[101]"></a>extern_io2_output</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, extern_function.o(i.extern_io2_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = extern_io2_output
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_function_pin_Init
</UL>

<P><STRONG><a name="[102]"></a>extern_io3_output</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, extern_function.o(i.extern_io3_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = extern_io3_output
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_function_pin_Init
</UL>

<P><STRONG><a name="[100]"></a>extern_io_output</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, extern_function.o(i.extern_io_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = extern_io_output
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[10b]"></a>focus_MotorControll</STRONG> (Thumb, 480 bytes, Stack size 4 bytes, motor.o(i.focus_MotorControll))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = focus_MotorControll
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedClass
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dir_Pos_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_goto_pos_absolutely
</UL>

<P><STRONG><a name="[a6]"></a>focus_action</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, motor.o(i.focus_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = focus_action &rArr; focus_motor_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_motor_stop
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_motor_near
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_motor_far
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptz_execute
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_ovf_isr
</UL>

<P><STRONG><a name="[c5]"></a>focus_goto_pos_absolutely</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, motor.o(i.focus_goto_pos_absolutely))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = focus_goto_pos_absolutely &rArr; focus_MotorControll
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_MotorControll
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_focus_onepush
</UL>

<P><STRONG><a name="[10e]"></a>focus_motor_far</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor.o(i.focus_motor_far))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = focus_motor_far
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_action
</UL>

<P><STRONG><a name="[10f]"></a>focus_motor_near</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor.o(i.focus_motor_near))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = focus_motor_near
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_action
</UL>

<P><STRONG><a name="[110]"></a>focus_motor_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor.o(i.focus_motor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = focus_motor_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_action
</UL>

<P><STRONG><a name="[111]"></a>focus_pin_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.focus_pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = focus_pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[112]"></a>get_baudrate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extern_function.o(i.get_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_baudrate &rArr; eeprom_byte_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
</UL>

<P><STRONG><a name="[113]"></a>get_cam_para_all</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, camera_control.o(i.get_cam_para_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = get_cam_para_all &rArr; cam_get_parameters_by_block_8 &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_by_block_8
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_by_block
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_system_para
</UL>

<P><STRONG><a name="[114]"></a>get_domeID</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, extern_function.o(i.get_domeID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_domeID &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
</UL>

<P><STRONG><a name="[115]"></a>get_syspara_from_eeporm</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, extern_function.o(i.get_syspara_from_eeporm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_syspara_from_eeporm &rArr; eeprom_byte_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
</UL>

<P><STRONG><a name="[116]"></a>iris_auto_by_shutter_handle</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, main.o(i.iris_auto_by_shutter_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iris_auto_by_shutter_handle &rArr; iris_open_set_relatively &rArr; LenDrvZoomMove &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shutter_value_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_open_set_relatively
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_close_set_relatively
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>iris_close_set_relatively</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(i.iris_close_set_relatively))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iris_close_set_relatively &rArr; LenDrvZoomMove &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenDrvZoomMove
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_manual_by_shutter_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_auto_by_shutter_handle
</UL>

<P><STRONG><a name="[119]"></a>iris_ex_pin_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.iris_ex_pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iris_ex_pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[106]"></a>iris_ex_pin_set</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.iris_ex_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iris_ex_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[11a]"></a>iris_lens_pos_init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(i.iris_lens_pos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iris_lens_pos_init &rArr; LenDrvZoomMove &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenDrvZoomMove
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>iris_manual_by_shutter_handle</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.iris_manual_by_shutter_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = iris_manual_by_shutter_handle &rArr; iris_open_set_relatively &rArr; LenDrvZoomMove &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_open_set_relatively
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_close_set_relatively
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>iris_motor_plus</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, motor.o(i.iris_motor_plus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iris_motor_plus &rArr; delay_X1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>iris_motor_sub</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, motor.o(i.iris_motor_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iris_motor_sub &rArr; delay_X1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>iris_open_set_relatively</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, main.o(i.iris_open_set_relatively))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iris_open_set_relatively &rArr; LenDrvZoomMove &rArr; LensDrvSPIWriteUint
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenDrvZoomMove
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_manual_by_shutter_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_auto_by_shutter_handle
</UL>

<P><STRONG><a name="[11e]"></a>iris_pin_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.iris_pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iris_pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[11f]"></a>jiguang_cmd_packet_send</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, jiguang.o(i.jiguang_cmd_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = jiguang_cmd_packet_send &rArr; send_bytes_to_jiguang
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes_to_jiguang
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_zoom_set
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_motor_reset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_current_set
</UL>

<P><STRONG><a name="[121]"></a>jiguang_comm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jiguang.o(i.jiguang_comm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = jiguang_comm_init &rArr; jiguang_io_init &rArr; APP_USART3_Baudrate &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_motor_reset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>jiguang_current_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, jiguang.o(i.jiguang_current_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = jiguang_current_set &rArr; jiguang_cmd_packet_send &rArr; send_bytes_to_jiguang
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_cmd_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>jiguang_io_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, jiguang.o(i.jiguang_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = jiguang_io_init &rArr; APP_USART3_Baudrate &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART3_Baudrate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_comm_init
</UL>

<P><STRONG><a name="[123]"></a>jiguang_motor_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jiguang.o(i.jiguang_motor_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = jiguang_motor_reset &rArr; jiguang_cmd_packet_send &rArr; send_bytes_to_jiguang
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_cmd_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_comm_init
</UL>

<P><STRONG><a name="[127]"></a>jiguang_zoom_handle</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, jiguang.o(i.jiguang_zoom_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = jiguang_zoom_handle &rArr; jiguang_zoom_set &rArr; jiguang_cmd_packet_send &rArr; send_bytes_to_jiguang
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_zoom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>jiguang_zoom_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, jiguang.o(i.jiguang_zoom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = jiguang_zoom_set &rArr; jiguang_cmd_packet_send &rArr; send_bytes_to_jiguang
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_cmd_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_zoom_handle
</UL>

<P><STRONG><a name="[129]"></a>key_long_osd_emu</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.key_long_osd_emu))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_long_osd_emu &rArr; delay_X1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>load_system_para</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, extern_function.o(i.load_system_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = load_system_para &rArr; get_domeID &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_threshold_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_lens_voltage_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_syspara_from_eeporm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_domeID
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baudrate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io_output
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cam_para_all
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io3_output
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io2_output
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_ex_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>load_system_para_by_mode</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, extern_function.o(i.load_system_para_by_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = load_system_para_by_mode &rArr; get_domeID &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_threshold_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_lens_voltage_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_syspara_from_eeporm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_domeID
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baudrate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io_output
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cam_para_all
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io3_output
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_io2_output
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_ex_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 358 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; cam_osd_control &rArr; wait_one_command &rArr; command_analysis &rArr; Keyboard_camera_porotocol_2 &rArr; PELCO_D_P_protocol_analysis_2 &rArr; save_system_para &rArr; set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_zoom_handle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_current_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_comm_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_motor_sub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_motor_plus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_half_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analysis
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_osd_control
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_data_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_camera_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptz_execute
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prePoint_num_Function
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_long_osd_emu
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_manual_by_shutter_handle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_lens_pos_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_auto_by_shutter_handle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_focus_onepush
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[105]"></a>motor_lens_voltage_set</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, extern_function.o(i.motor_lens_voltage_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_lens_voltage_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[132]"></a>motor_voltage_pin_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.motor_voltage_pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor_voltage_pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[136]"></a>my_mem_free</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[0]"></a>my_mem_init</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_init &rArr; my_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_data_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[137]"></a>my_mem_malloc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[1]"></a>my_mem_perused</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>my_memset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.my_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = my_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[103]"></a>my_proto_call_preset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rs485_response.o(i.my_proto_call_preset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = my_proto_call_preset &rArr; send_to_rs485_data &rArr; RS485_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_rs485_data
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[fe]"></a>myfree</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delqueue
</UL>

<P><STRONG><a name="[c1]"></a>mymalloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addqueue
</UL>

<P><STRONG><a name="[12d]"></a>ports_initial</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.ports_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ports_initial &rArr; uart_to_camera_init &rArr; APP_USART2_Baudrate &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;an41908a_spi_pin_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_pin_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_camera_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_initial
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_voltage_pin_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_pin_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iris_ex_pin_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_pin_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_function_pin_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_power_key_pin_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>prePoint_num_Function</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.prePoint_num_Function))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>ptz_execute</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(i.ptz_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ptz_execute &rArr; MotorStop &rArr; zoom_action &rArr; zoom_motor_wide
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_action
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_action
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>return_cmd_to_camlink</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, protocol.o(i.return_cmd_to_camlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = return_cmd_to_camlink &rArr; RS485_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_link_protocol_analysis
</UL>

<P><STRONG><a name="[aa]"></a>save_baudrate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extern_function.o(i.save_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = save_baudrate &rArr; uart0_init &rArr; APP_USART1_Baudrate &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PELCO_D_P_protocol_analysis_2
</UL>

<P><STRONG><a name="[a9]"></a>save_domeID</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extern_function.o(i.save_domeID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = save_domeID &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PELCO_D_P_protocol_analysis_2
</UL>

<P><STRONG><a name="[a8]"></a>save_system_para</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, extern_function.o(i.save_system_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = save_system_para &rArr; set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_syspara_to_eeporm
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cam_para_all
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PELCO_D_P_protocol_analysis_2
</UL>

<P><STRONG><a name="[120]"></a>send_bytes_to_jiguang</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, jiguang.o(i.send_bytes_to_jiguang))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = send_bytes_to_jiguang
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiguang_cmd_packet_send
</UL>

<P><STRONG><a name="[135]"></a>send_to_rs485_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rs485_response.o(i.send_to_rs485_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = send_to_rs485_data &rArr; RS485_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendBytes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_proto_call_preset
</UL>

<P><STRONG><a name="[68]"></a>serial_int1_receive</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, main.o(i.serial_int1_receive))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART2_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>serial_int1_send</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(i.serial_int1_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = serial_int1_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART2_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>set_cam_para_all</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, camera_control.o(i.set_cam_para_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_cam_para_all &rArr; cam_set_parameters_by_block &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters_by_block_8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_set_parameters_by_block
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
</UL>

<P><STRONG><a name="[13e]"></a>set_syspara_to_eeporm</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, extern_function.o(i.set_syspara_to_eeporm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_system_para
</UL>

<P><STRONG><a name="[12c]"></a>shutter_threshold_get</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, extern_function.o(i.shutter_threshold_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shutter_threshold_get &rArr; eeprom_byte_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para_by_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_system_para
</UL>

<P><STRONG><a name="[104]"></a>shutter_threshold_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, extern_function.o(i.shutter_threshold_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shutter_threshold_set &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dome_func_control
</UL>

<P><STRONG><a name="[13a]"></a>timer0_initial</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.timer0_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer0_initial &rArr; BSP_Timer2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[59]"></a>timer0_int</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main.o(i.timer0_int))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TIM2_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>timer1_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor.o(i.timer1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer1_init &rArr; BSP_Timer3_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[5b]"></a>timer1_ovf_isr</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, motor.o(i.timer1_ovf_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer1_ovf_isr &rArr; focus_action &rArr; focus_motor_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_action
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_move_tilt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TIM3_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>timer3_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.timer3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer3_init &rArr; BSP_Timer5_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Timer5_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>

<P><STRONG><a name="[5d]"></a>timer3_ovf_isr</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, motor.o(i.timer3_ovf_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer3_ovf_isr &rArr; zoom_action &rArr; zoom_motor_wide
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_action
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_move
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TIM5_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>txd1_buffer_send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, camera_control.o(i.txd1_buffer_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buffer_send
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_oneByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_by_block_8
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_parameters_by_block
</UL>

<P><STRONG><a name="[12f]"></a>uart0_init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, main.o(i.uart0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uart0_init &rArr; APP_USART1_Baudrate &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART1_Baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_baudrate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>uart0_rx_isr</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, protocol.o(i.uart0_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart0_rx_isr &rArr; addqueue &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART1_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>uart_to_camera_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.uart_to_camera_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uart_to_camera_init &rArr; APP_USART2_Baudrate &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_USART2_Baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>wait_not_this_command</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, osd_control.o(i.wait_not_this_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wait_not_this_command &rArr; command_analysis &rArr; Keyboard_camera_porotocol_2 &rArr; PELCO_D_P_protocol_analysis_2 &rArr; save_system_para &rArr; set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_osd_control
</UL>

<P><STRONG><a name="[dd]"></a>wait_one_command</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, osd_control.o(i.wait_one_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wait_one_command &rArr; command_analysis &rArr; Keyboard_camera_porotocol_2 &rArr; PELCO_D_P_protocol_analysis_2 &rArr; save_system_para &rArr; set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_osd_control
</UL>

<P><STRONG><a name="[a5]"></a>zoom_action</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, motor.o(i.zoom_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = zoom_action &rArr; zoom_motor_wide
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_motor_wide
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_motor_tele
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_motor_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptz_execute
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_ovf_isr
</UL>

<P><STRONG><a name="[144]"></a>zoom_motor_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i.zoom_motor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = zoom_motor_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_action
</UL>

<P><STRONG><a name="[143]"></a>zoom_motor_tele</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i.zoom_motor_tele))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = zoom_motor_tele
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_action
</UL>

<P><STRONG><a name="[142]"></a>zoom_motor_wide</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i.zoom_motor_wide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = zoom_motor_wide
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_action
</UL>

<P><STRONG><a name="[139]"></a>zoom_pin_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.zoom_pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = zoom_pin_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ports_initial
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b8]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b9]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[93]"></a>PELCO_D_P_protocol_analysis_2</STRONG> (Thumb, 2184 bytes, Stack size 24 bytes, protocol.o(i.PELCO_D_P_protocol_analysis_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PELCO_D_P_protocol_analysis_2 &rArr; save_system_para &rArr; set_syspara_to_eeporm &rArr; eeprom_byte_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_system_para
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_domeID
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_camera_porotocol_2
</UL>

<P><STRONG><a name="[94]"></a>camera_link_protocol_analysis</STRONG> (Thumb, 732 bytes, Stack size 16 bytes, protocol.o(i.camera_link_protocol_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = camera_link_protocol_analysis &rArr; cam_zoom_mode_set &rArr; cam_set_parameters &rArr; camera_buffer_send &rArr; txd1_buffer_send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_zoom_mode_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_zoom_disp_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_picture_reverse_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_frog_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_freeze_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_cross_line_mode_set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_color_mode_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_brightness_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_brightness_mode_get
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_brightness_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_atw_level_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_atw_level_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_X1ms
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_filt_cutter_set
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_cmd_to_camlink
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_camera_porotocol_2
</UL>

<P><STRONG><a name="[13f]"></a>packet_cmd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rs485_response.o(i.packet_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_rs485_data
</UL>

<P><STRONG><a name="[134]"></a>send_buff_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rs485_response.o(i.send_buff_init))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_proto_call_preset
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
